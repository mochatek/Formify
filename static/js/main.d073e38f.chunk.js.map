{"version":3,"sources":["lib/exportUI.js","components/Container.js","components/Element.js","components/Toolbar.js","components/Modal.js","App.js","index.js"],"names":["addElements","ui","reduce","prev","el","wx_max","wy_max","wx","wy","Math","floor","y","left","top","translateXY","x","style","size","weight","element","type","text","Container","elements","dropHandler","selected","select","edit","className","tabIndex","onDragOver","event","preventDefault","onDrop","onClick","onKeyDown","id","stopPropagation","content","download_link","document","createElement","setAttribute","encodeURIComponent","body","appendChild","click","removeChild","map","fontSize","fontWeight","e","draggable","onDragStart","dataTransfer","setData","JSON","stringify","value","readOnly","memo","Element","Toolbar","href","Modal","defText","defX","defY","defSize","defWeight","close","save","useState","setText","setX","setY","setSize","setWeight","htmlFor","name","onChange","target","trim","min","max","v4","App","modal","setModal","setElements","setSelected","useEffect","parse","localStorage","getItem","length","setItem","useCallback","getData","clientX","clientY","openModal","key","find","filter","render","getElementById"],"mappings":"+JAsBA,SAASA,EAAYC,GACnB,OAAOA,EAAGC,QAAO,SAACC,EAAMC,GACtB,MAhBJ,SAAqBC,EAAQC,EAAQC,EAAIC,GACvC,IACA,EAAe,CACbC,KAAKC,MAAMH,GAFa,KAEEF,IAC1BI,KAAKC,MAAMF,GAHmB,IAGJF,KAFlBK,EAAV,KAIA,MAAO,CAAEC,KAAK,GAAD,OAJb,KAIa,MAAYC,IAAI,GAAD,OAAKF,EAAL,OAUJG,CAAY,KAAM,IAAKV,EAAGW,EAAGX,EAAGO,GAA9CC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,IACRG,EAAK,gBAAYJ,EAAZ,iBAAyBC,EAAzB,wBAA4CT,EAAGa,KAA/C,4BAAuEb,EAAGc,QACjFC,EAAU,GAUd,MARgB,WAAZf,EAAGgB,KACLD,EAAO,yBAAqBH,EAArB,6BAA+CZ,EAAGiB,KAAlD,aACc,UAAZjB,EAAGgB,KACZD,EAAO,oCAAgCH,EAAhC,oCAAiEZ,EAAGiB,KAApE,QACc,UAAZjB,EAAGgB,OACZD,EAAO,wBAAoBH,EAApB,6BAA8CZ,EAAGiB,KAAjD,aAGFlB,EAAOgB,IACb,I,WClCL,SAASG,EAAT,GAAuE,IAAlDC,EAAiD,EAAjDA,SAAUC,EAAuC,EAAvCA,YAAaC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,OAAQC,EAAQ,EAARA,KAC5D,OAEE,cADA,CACA,OACEC,UAAU,YACVC,SAAU,EACVC,WAAY,SAACC,GAAD,OAAWA,EAAMC,kBAC7BC,OAAQT,EACRU,QAAS,kBAAMR,EAAO,OACtBS,UAAWR,EANb,UASE,wBACES,GAAG,SACHF,QAAS,SAACH,GACRA,EAAMC,iBACND,EAAMM,kBAEN,IAAMC,EDyBR,o/BAAN,OA0CUtC,ECnE2BuB,GDyBrC,iCCxBcgB,EAAgBC,SAASC,cAAc,KAC7CF,EAAcG,aAAa,WAAY,aACvCH,EAAcG,aACZ,OACA,gCAAkCC,mBAAmBL,IAEvDE,SAASI,KAAKC,YAAYN,GAC1BA,EAAcO,QACdN,SAASI,KAAKG,YAAYR,IAf9B,2BAsBChB,EAASyB,KAAI,YAA6C,IAA1CZ,EAAyC,EAAzCA,GAAIhB,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,KAAMN,EAAyB,EAAzBA,EAAGJ,EAAsB,EAAtBA,EAAGM,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACrCF,EAAQ,CACZJ,KAAK,GAAD,OAAKG,EAAL,MACJF,IAAI,GAAD,OAAKF,EAAL,MACHsC,SAAS,GAAD,OAAKhC,EAAL,MACRiC,WAAYhC,GAGd,MAAa,UAATE,EAEA,uBAEEQ,UAAS,iBAAYQ,IAAOX,EAAW,YAAc,IACrDT,MAAOA,EACPkB,QAAS,SAACiB,GACRA,EAAEd,kBACFX,EAAOU,IAETgB,WAAS,EACTC,YAAa,SAACtB,GAAD,OACXA,EAAMuB,aAAaC,QAAQ,aAAcC,KAAKC,UAAU,CAAErB,SAV9D,SAaGf,GAZIe,GAeS,WAAThB,EAEP,wBAEEQ,UAAS,iBAAYQ,IAAOX,EAAW,YAAc,IACrDT,MAAOA,EACPkB,QAAS,SAACiB,GACRA,EAAEnB,iBACFmB,EAAEd,kBACFX,EAAOU,IAETgB,WAAS,EACTC,YAAa,SAACtB,GAAD,OACXA,EAAMuB,aAAaC,QAAQ,aAAcC,KAAKC,UAAU,CAAErB,SAX9D,SAcGf,GAbIe,GAkBP,uBAEER,UAAS,iBAAYQ,IAAOX,EAAW,YAAc,IACrDT,MAAOA,EACPI,KAAK,OACLsC,MAAOrC,EACPsC,UAAQ,EACRzB,QAAS,SAACiB,GACRA,EAAEnB,iBACFmB,EAAEd,kBACFX,EAAOU,IAETgB,WAAS,EACTC,YAAa,SAACtB,GAAD,OACXA,EAAMuB,aAAaC,QAAQ,aAAcC,KAAKC,UAAU,CAAErB,UAbvDA,SAuBJwB,qBAAKtC,GC5GL,SAASuC,EAAT,GAA4B,IAATzC,EAAQ,EAARA,KAChC,OACE,qBACEgC,WAAW,EACXC,YAAa,SAACtB,GAAD,OACXA,EAAMuB,aAAaC,QAAQ,aAAcC,KAAKC,UAAU,CAAErC,WAH9D,oBAMKA,KCLT,SAAS0C,IACP,OACE,sBAAKlC,UAAU,UAAf,UACE,gCACE,wCAEA,6BACG,CAAC,QAAS,QAAS,UAAUoB,KAAI,SAAC5C,GAAD,OAChC,cAACyD,EAAD,CAAkBzC,KAAMhB,GAAVA,WAKpB,gCACE,sCAEA,oEACA,oGACA,gEACA,uCACQ,yCADR,8BAGA,uCACQ,0CADR,2BAGA,gEACA,uCACQ,0CADR,2BAKF,2DACkB,mBAAG2D,KAAK,8BAAR,sBAAmD,IADrE,kBAQSH,qBAAKE,G,eCvCL,SAASE,EAAT,GAUX,IAAD,IATD5B,UASC,MATI,KASJ,EARDhB,EAQC,EARDA,KACA6C,EAOC,EAPDA,QACAC,EAMC,EANDA,KACAC,EAKC,EALDA,KACAC,EAIC,EAJDA,QACAC,EAGC,EAHDA,UACAC,EAEC,EAFDA,MACAC,EACC,EADDA,KAEA,EAAwBC,mBAASP,GAAjC,mBAAO5C,EAAP,KAAaoD,EAAb,KACA,EAAkBD,mBAASN,GAA3B,mBAAOnD,EAAP,KAAU2D,EAAV,KACA,EAAkBF,mBAASL,GAA3B,mBAAOxD,EAAP,KAAUgE,EAAV,KACA,EAAwBH,mBAASJ,GAAjC,mBAAOnD,EAAP,KAAa2D,EAAb,KACA,EAA4BJ,mBAASH,GAArC,mBAAOnD,EAAP,KAAe2D,EAAf,KAEA,OACE,qBAAKjD,UAAU,QAAf,SACE,sBAAKA,UAAU,gBAAf,UACE,sBAAKA,UAAU,aAAf,UACE,uBAAMQ,GAAG,QAAT,kBAAuBhB,KACvB,sBAAMgB,GAAG,QAAQF,QAASoC,EAA1B,uBAKF,iCACE,gCACE,uBAAOQ,QAAQ,OAAf,kBACA,uBACE1D,KAAK,OACL2D,KAAK,OACLrB,MAAOrC,EACP2D,SAAU,SAAC7B,GAAD,OAAOsB,EAAQtB,EAAE8B,OAAOvB,MAAMwB,QAAUjB,SAGtD,gCACE,uBAAOa,QAAQ,IAAf,oBACA,uBACE1D,KAAK,SACL2D,KAAK,IACLrB,MAAO3C,EACPoE,IAAK,EACLH,SAAU,SAAC7B,GAAD,OAAOuB,GAAMvB,EAAE8B,OAAOvB,OAASQ,SAG7C,gCACE,uBAAOY,QAAQ,IAAf,oBACA,uBACE1D,KAAK,SACL2D,KAAK,IACLrB,MAAO/C,EACPwE,IAAK,EACLH,SAAU,SAAC7B,GAAD,OAAOwB,GAAMxB,EAAE8B,OAAOvB,OAASS,SAG7C,gCACE,uBAAOW,QAAQ,OAAf,4BACA,uBACE1D,KAAK,SACL2D,KAAK,OACLrB,MAAOzC,EACPkE,IAAK,EACLH,SAAU,SAAC7B,GAAD,OAAOyB,GAASzB,EAAE8B,OAAOvB,OAASU,SAGhD,gCACE,uBAAOU,QAAQ,SAAf,yBACA,uBACE1D,KAAK,SACLsC,MAAOxC,EACPiE,IAAK,IACLC,IAAK,IACLJ,SAAU,SAAC7B,GAAD,OAAO0B,GAAW1B,EAAE8B,OAAOvB,OAASW,SAGlD,wBACEnC,QAAS,SAACiB,GACRA,EAAEnB,iBAUAuC,EARGnC,EAQE,SAACjC,GAAD,OACHA,EAAK6C,KAAI,SAAC5C,GAIR,OAHIA,EAAGgC,KAAOA,IACZhC,EAAK,CAAEgC,KAAIhB,OAAMC,OAAMN,IAAGJ,IAAGM,OAAMC,WAE9Bd,MAXN,SAACD,GAAD,4BACAA,GADA,CAEH,CAAEiC,GAAIiD,cAAMjE,OAAMC,OAAMN,IAAGJ,IAAGM,OAAMC,cAaxCoD,KArBJ,kCC3EK,SAASgB,IACtB,MAA0Bd,mBAAS,MAAnC,mBAAOe,EAAP,KAAcC,EAAd,KACA,EAAgChB,mBAAS,IAAzC,mBAAOjD,EAAP,KAAiBkE,EAAjB,KACA,EAAgCjB,mBAAS,MAAzC,mBAAO/C,EAAP,KAAiBiE,EAAjB,KAEAC,qBAAU,WAER,IAAM1F,EAAKuD,KAAKoC,MAAMC,aAAaC,QAAQ,OACvC7F,GAAMA,EAAG8F,QACXN,EAAYxF,KAEb,IAEH0F,qBAAU,WAERE,aAAaG,QAAQ,KAAMxC,KAAKC,UAAUlC,MACzC,CAACA,IAEJ,IAAMC,EAAcyE,uBAAY,SAAClE,GAC/B,GAAIA,EAAMuB,aAAa4C,QAAQ,QAAS,CACtC,MAAqB1C,KAAKoC,MAAM7D,EAAMuB,aAAa4C,QAAQ,SAAnD9E,EAAR,EAAQA,KAAMgB,EAAd,EAAcA,GAGd,GAAKA,EAcHqD,GAAY,SAACtF,GAAD,OACVA,EAAK6C,KAAI,SAAC5C,GAKR,OAJIA,EAAGgC,KAAOA,IACZhC,EAAGW,EAAIgB,EAAMoE,QACb/F,EAAGO,EAAIoB,EAAMqE,SAERhG,YApBJ,CACP,IAAM8D,EAAOnC,EAAMoE,QACbhC,EAAOpC,EAAMqE,QACnBZ,EAAS,CACPpE,OACA6C,QAAS7C,EACT8C,OACAC,OACAC,QAAS,GACTC,UAAW,UAgBhB,IAEGgC,EAAYJ,uBAChB,SAAClE,GACC,GAAkB,UAAdA,EAAMuE,KAAmB7E,EAAU,CAErC,MAQIF,EAASgF,MAAK,SAACnG,GAAD,OAAQA,EAAGgC,KAAOX,KAPlCW,EADF,EACEA,GACAhB,EAFF,EAEEA,KACM6C,EAHR,EAGE5C,KACG6C,EAJL,EAIEnD,EACGoD,EALL,EAKExD,EACMyD,EANR,EAMEnD,KACQoD,EAPV,EAOEnD,OAGFsE,EAAS,CAAEpD,KAAIhB,OAAM6C,UAASC,OAAMC,OAAMC,UAASC,cACnDqB,EAAY,UACW,WAAd3D,EAAMuE,KAAoB7E,IAEnCgE,GAAY,SAACtF,GAAD,OAAUA,EAAKqG,QAAO,SAACpG,GAAD,OAAQA,EAAGgC,KAAOX,QACpDiE,EAAY,SAGhB,CAACjE,EAAUF,IAGb,OACE,iCACE,cAAC,EAAD,CACEA,SAAUA,EACVC,YAAaA,EACbC,SAAUA,EACVC,OAAQgE,EACR/D,KAAM0E,IAER,cAAC,EAAD,IACCd,GACC,cAACvB,EAAD,2BAAWuB,GAAX,IAAkBjB,MAAO,kBAAMkB,EAAS,OAAOjB,KAAMkB,Q,MCtF7DgB,iBACE,cAAC,aAAD,UACE,cAACnB,EAAD,MAEF9C,SAASkE,eAAe,W","file":"static/js/main.d073e38f.chunk.js","sourcesContent":["/**\r\n * Apply window to viewport transformation on the coordinates\r\n * @param {number} wx_max Window right\r\n * @param {number} wy_max Window bottom\r\n * @param {number} wx Element left in window\r\n * @param {number} wy Element top in window\r\n * @returns {left: string, top: string} Transformed left and top pixels values in viewport\r\n */\r\nfunction translateXY(wx_max, wy_max, wx, wy) {\r\n  const [vx_max, vy_max] = [1360, 660];\r\n  const [x, y] = [\r\n    Math.floor(wx * (vx_max / wx_max)),\r\n    Math.floor(wy * (vy_max / wy_max)),\r\n  ];\r\n  return { left: `${x}px`, top: `${y}px` };\r\n}\r\n\r\n/**\r\n * Generate HTML string with all elements and its attributes from the UI list\r\n * @param {Array} ui Array of elements\r\n * @returns {string} HTML string\r\n */\r\nfunction addElements(ui) {\r\n  return ui.reduce((prev, el) => {\r\n    const { left, top } = translateXY(1140, 660, el.x, el.y);\r\n    const style = `left: ${left}; top:${top}; font-size: ${el.size}px; font-weight: ${el.weight}`;\r\n    let element = \"\";\r\n\r\n    if (el.type === \"Button\") {\r\n      element = `<button style=\"${style}\" class=\"element\">${el.text}</button>`;\r\n    } else if (el.type === \"Input\") {\r\n      element = `<input type=\"text\" style=\"${style}\" class=\"element\" value=\"${el.text}\" />`;\r\n    } else if (el.type === \"Label\") {\r\n      element = `<label style=\"${style}\" class=\"element\">${el.text}</label>`;\r\n    }\r\n\r\n    return prev + element;\r\n  }, \"\");\r\n}\r\n\r\n/**\r\n * Generate HTML page with all elements in UI and styles applied\r\n * @param {Array} ui Array of elements\r\n * @returns {string} HTML source of the page\r\n */\r\nexport default function generatePage(ui) {\r\n  return `<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n    <title>Form</title>\r\n    <style>\r\n        * {\r\n            box-sizing: border-box\r\n        }\r\n        body {\r\n            padding: 0;\r\n            margin: 0;\r\n        }\r\n        form {\r\n            width: 100vw;\r\n            height: 100vh;\r\n            position: relative;\r\n            font-family: Tahoma;\r\n        }\r\n        .element {\r\n            position: absolute;\r\n            padding: 0.5rem;\r\n            margin: 0;\r\n        }\r\n        input, button {\r\n          outline: none;\r\n          border: 1px solid lightgrey;\r\n          border-radius: 4px;\r\n        }\r\n        button {\r\n          color: white;\r\n          background-color: #007BFF;\r\n          border: none;\r\n          box-shadow: 0px 1px 5px 1px lightgrey;\r\n        }\r\n        button:hover {\r\n          background-color: #17A2B8\r\n        }\r\n    </style>\r\n  </head>\r\n  <body>\r\n    <form>${addElements(ui)}</form>\r\n  </body>\r\n</html>\r\n`;\r\n}\r\n","import generatePage from \"../lib/exportUI\";\r\nimport { memo } from \"react\";\r\n\r\nfunction Container({ elements, dropHandler, selected, select, edit }) {\r\n  return (\r\n    // Container where we can drop elements and create UI\r\n    <div\r\n      className=\"container\"\r\n      tabIndex={0}\r\n      onDragOver={(event) => event.preventDefault()}\r\n      onDrop={dropHandler}\r\n      onClick={() => select(null)}\r\n      onKeyDown={edit}\r\n    >\r\n      {/* Button to download current UI as HTML file */}\r\n      <button\r\n        id=\"export\"\r\n        onClick={(event) => {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n\r\n          const content = generatePage(elements);\r\n          const download_link = document.createElement(\"a\");\r\n          download_link.setAttribute(\"download\", \"form.html\");\r\n          download_link.setAttribute(\r\n            \"href\",\r\n            \"data:text/html;charset=utf-8,\" + encodeURIComponent(content)\r\n          );\r\n          document.body.appendChild(download_link);\r\n          download_link.click();\r\n          document.body.removeChild(download_link);\r\n        }}\r\n      >\r\n        ➤ Export\r\n      </button>\r\n\r\n      {/* Display elements dropped on the container */}\r\n      {elements.map(({ id, type, text, x, y, size, weight }) => {\r\n        const style = {\r\n          left: `${x}px`,\r\n          top: `${y}px`,\r\n          fontSize: `${size}px`,\r\n          fontWeight: weight,\r\n        };\r\n\r\n        if (type === \"Label\") {\r\n          return (\r\n            <label\r\n              key={id}\r\n              className={`element${id === selected ? \" selected\" : \"\"}`}\r\n              style={style}\r\n              onClick={(e) => {\r\n                e.stopPropagation();\r\n                select(id);\r\n              }}\r\n              draggable\r\n              onDragStart={(event) =>\r\n                event.dataTransfer.setData(\"text/plain\", JSON.stringify({ id }))\r\n              }\r\n            >\r\n              {text}\r\n            </label>\r\n          );\r\n        } else if (type === \"Button\") {\r\n          return (\r\n            <button\r\n              key={id}\r\n              className={`element${id === selected ? \" selected\" : \"\"}`}\r\n              style={style}\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                select(id);\r\n              }}\r\n              draggable\r\n              onDragStart={(event) =>\r\n                event.dataTransfer.setData(\"text/plain\", JSON.stringify({ id }))\r\n              }\r\n            >\r\n              {text}\r\n            </button>\r\n          );\r\n        } else {\r\n          return (\r\n            <input\r\n              key={id}\r\n              className={`element${id === selected ? \" selected\" : \"\"}`}\r\n              style={style}\r\n              type=\"text\"\r\n              value={text}\r\n              readOnly\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                select(id);\r\n              }}\r\n              draggable\r\n              onDragStart={(event) =>\r\n                event.dataTransfer.setData(\"text/plain\", JSON.stringify({ id }))\r\n              }\r\n            />\r\n          );\r\n        }\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default memo(Container);\r\n","export default function Element({ type }) {\r\n  return (\r\n    <li\r\n      draggable={true}\r\n      onDragStart={(event) =>\r\n        event.dataTransfer.setData(\"text/plain\", JSON.stringify({ type }))\r\n      }\r\n    >\r\n      ▣ {type}\r\n    </li>\r\n  );\r\n}\r\n","import Element from \"./Element\";\r\nimport { memo } from \"react\";\r\n\r\nfunction Toolbar() {\r\n  return (\r\n    <div className=\"toolbar\">\r\n      <div>\r\n        <h3>BLOCKS</h3>\r\n\r\n        <ul>\r\n          {[\"Label\", \"Input\", \"Button\"].map((el) => (\r\n            <Element key={el} type={el} />\r\n          ))}\r\n        </ul>\r\n      </div>\r\n\r\n      <div>\r\n        <h3>HELP</h3>\r\n\r\n        <p>Drag and drop elements to the grid.</p>\r\n        <p>💡 Drag from top left corner to position elements easily.</p>\r\n        <p>Click the element to select it.</p>\r\n        <p>\r\n          Press <mark>Enter</mark> to edit its attributes.\r\n        </p>\r\n        <p>\r\n          Press <mark>Delete</mark> to remove from grid.\r\n        </p>\r\n        <p>Click on the grid to de-select.</p>\r\n        <p>\r\n          Click <mark>Export</mark> to download form.\r\n        </p>\r\n      </div>\r\n\r\n      <p>\r\n        Made with ❤️ by <a href=\"https://github.com/mochatek\">MochaTek</a>{\" \"}\r\n        &copy; 2022\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default memo(Toolbar);\r\n","import { useState } from \"react\";\r\nimport { v4 } from \"uuid\";\r\n\r\nexport default function Modal({\r\n  id = null,\r\n  type,\r\n  defText,\r\n  defX,\r\n  defY,\r\n  defSize,\r\n  defWeight,\r\n  close,\r\n  save,\r\n}) {\r\n  const [text, setText] = useState(defText);\r\n  const [x, setX] = useState(defX);\r\n  const [y, setY] = useState(defY);\r\n  const [size, setSize] = useState(defSize);\r\n  const [weight, setWeight] = useState(defWeight);\r\n\r\n  return (\r\n    <div className=\"modal\">\r\n      <div className=\"modal-content\">\r\n        <div className=\"modal-head\">\r\n          <span id=\"label\">Edit {type}</span>\r\n          <span id=\"close\" onClick={close}>\r\n            ✖\r\n          </span>\r\n        </div>\r\n\r\n        <form>\r\n          <div>\r\n            <label htmlFor=\"text\">Text</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"text\"\r\n              value={text}\r\n              onChange={(e) => setText(e.target.value.trim() || defText)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"x\">X (px)</label>\r\n            <input\r\n              type=\"number\"\r\n              name=\"x\"\r\n              value={x}\r\n              min={0}\r\n              onChange={(e) => setX(+e.target.value || defX)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"y\">Y (px)</label>\r\n            <input\r\n              type=\"number\"\r\n              name=\"y\"\r\n              value={y}\r\n              min={0}\r\n              onChange={(e) => setY(+e.target.value || defY)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"size\">Font Size (px)</label>\r\n            <input\r\n              type=\"number\"\r\n              name=\"size\"\r\n              value={size}\r\n              min={1}\r\n              onChange={(e) => setSize(+e.target.value || defSize)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"weight\">Font Weight</label>\r\n            <input\r\n              type=\"number\"\r\n              value={weight}\r\n              min={400}\r\n              max={700}\r\n              onChange={(e) => setWeight(+e.target.value || defWeight)}\r\n            />\r\n          </div>\r\n          <button\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n\r\n              if (!id) {\r\n                // Add new element if id is not present\r\n                save((prev) => [\r\n                  ...prev,\r\n                  { id: v4(), type, text, x, y, size, weight },\r\n                ]);\r\n              } else {\r\n                // Update existing element if id is present\r\n                save((prev) =>\r\n                  prev.map((el) => {\r\n                    if (el.id === id) {\r\n                      el = { id, type, text, x, y, size, weight };\r\n                    }\r\n                    return el;\r\n                  })\r\n                );\r\n              }\r\n              close();\r\n            }}\r\n          >\r\n            Save Changes\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import Container from \"./components/Container\";\r\nimport Toolbar from \"./components/Toolbar\";\r\nimport Modal from \"./components/Modal\";\r\nimport { useState, useEffect, useCallback } from \"react\";\r\n\r\nexport default function App() {\r\n  const [modal, setModal] = useState(null);\r\n  const [elements, setElements] = useState([]);\r\n  const [selected, setSelected] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Initialize UI with saved data from localStorage\r\n    const ui = JSON.parse(localStorage.getItem(\"ui\"));\r\n    if (ui && ui.length) {\r\n      setElements(ui);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Auto-save to localStorage when elements are updated\r\n    localStorage.setItem(\"ui\", JSON.stringify(elements));\r\n  }, [elements]);\r\n\r\n  const dropHandler = useCallback((event) => {\r\n    if (event.dataTransfer.getData(\"text\")) {\r\n      const { type, id } = JSON.parse(event.dataTransfer.getData(\"text\"));\r\n\r\n      // New element is added to container\r\n      if (!id) {\r\n        const defX = event.clientX;\r\n        const defY = event.clientY;\r\n        setModal({\r\n          type,\r\n          defText: type,\r\n          defX,\r\n          defY,\r\n          defSize: 12,\r\n          defWeight: 400,\r\n        });\r\n\r\n        // Dragging existing element in container\r\n      } else {\r\n        setElements((prev) =>\r\n          prev.map((el) => {\r\n            if (el.id === id) {\r\n              el.x = event.clientX;\r\n              el.y = event.clientY;\r\n            }\r\n            return el;\r\n          })\r\n        );\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  const openModal = useCallback(\r\n    (event) => {\r\n      if (event.key === \"Enter\" && selected) {\r\n        // Modify attributes of element\r\n        const {\r\n          id,\r\n          type,\r\n          text: defText,\r\n          x: defX,\r\n          y: defY,\r\n          size: defSize,\r\n          weight: defWeight,\r\n        } = elements.find((el) => el.id === selected);\r\n\r\n        setModal({ id, type, defText, defX, defY, defSize, defWeight });\r\n        setSelected(null);\r\n      } else if (event.key === \"Delete\" && selected) {\r\n        // Remove element from UI\r\n        setElements((prev) => prev.filter((el) => el.id !== selected));\r\n        setSelected(null);\r\n      }\r\n    },\r\n    [selected, elements]\r\n  );\r\n\r\n  return (\r\n    <main>\r\n      <Container\r\n        elements={elements}\r\n        dropHandler={dropHandler}\r\n        selected={selected}\r\n        select={setSelected}\r\n        edit={openModal}\r\n      />\r\n      <Toolbar />\r\n      {modal && (\r\n        <Modal {...modal} close={() => setModal(null)} save={setElements} />\r\n      )}\r\n    </main>\r\n  );\r\n}\r\n","import { render } from \"react-dom\";\nimport { StrictMode } from \"react\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nrender(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}